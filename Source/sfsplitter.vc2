*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="sfsplitter.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS sfsplitter AS control 
 	*< CLASSDATA: Baseclass="control" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: getobject1size		&& Gets the size for Object 1
		*m: getobject2size		&& Gets the size for Object 2
		*m: getobjectnames		&& Populates an array from a comma-delimited list
		*m: getposition		&& Returns the new position: X for a horizontal splitter and Y for a vertical splitter
		*m: moveobject1		&& Moves Object 1 to the new position
		*m: moveobject2		&& Moves Object 2 to the new position
		*m: movesplittertoposition		&& Moves the splitter to the specified position
		*m: setposition		&& Sets the new position for the splitter
		*m: splittermoved		&& Called after the splitter is moved
		*p: cobject1name		&& The name of the object above (for a vertical splitter) or to the left of (for a horizontal splitter) the splitter
		*p: cobject2name		&& The name of the object below (for a vertical splitter) or to the right of (for a horizontal splitter) the splitter
		*p: linitialized		&& .T. after the control has been initialized
		*p: nobject1minsize		&& The minimum height (for a vertical splitter) or width (for a horizontal splitter) of Object 1
		*p: nobject2minsize		&& The minimum height (for a vertical splitter) or width (for a horizontal splitter) of Object 2
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderColor = 255,0,0
	BorderWidth = 2
	cobject1name = 		&& The name of the object above (for a vertical splitter) or to the left of (for a horizontal splitter) the splitter
	cobject2name = 		&& The name of the object below (for a vertical splitter) or to the right of (for a horizontal splitter) the splitter
	Height = 200
	linitialized = .F.		&& .T. after the control has been initialized
	Name = "sfsplitter"
	nobject1minsize = 0		&& The minimum height (for a vertical splitter) or width (for a horizontal splitter) of Object 1
	nobject2minsize = 0		&& The minimum height (for a vertical splitter) or width (for a horizontal splitter) of Object 2
	Width = 10
	_memberdata = <VFPData>
		<memberdata name="getobjectnames" type="method" display="GetObjectNames"/>
		<memberdata name="movesplittertoposition" type="method" display="MoveSplitterToPosition"/>
		<memberdata name="linitialized" type="property" display="lInitialized"/>
		<memberdata name="cobject1name" type="property" display="cObject1Name"/>
		<memberdata name="cobject2name" type="property" display="cObject2Name"/>
		<memberdata name="nobject1minsize" type="property" display="nObject1MinSize"/>
		<memberdata name="nobject2minsize" type="property" display="nObject2MinSize"/>
		<memberdata name="getobject1size" type="method" display="GetObject1Size"/>
		<memberdata name="getobject2size" type="method" display="GetObject2Size"/>
		<memberdata name="setposition" type="method" display="SetPosition"/>
		<memberdata name="moveobject1" type="method" display="MoveObject1"/>
		<memberdata name="moveobject2" type="method" display="MoveObject2"/>
		<memberdata name="getposition" type="method" display="GetPosition"/>
		<memberdata name="splittermoved" type="method" display="SplitterMoved"/>
		</VFPData>		&& XML Metadata for customizable properties
	
	PROTECTED PROCEDURE getobject1size		&& Gets the size for Object 1
		* Abstract method.
		
		lparameters toObject
		
	ENDPROC

	PROTECTED PROCEDURE getobject2size		&& Gets the size for Object 2
		* Abstract method.
		
		lparameters toObject
		
	ENDPROC

	PROTECTED PROCEDURE getobjectnames		&& Populates an array from a comma-delimited list
		lparameters tcList, ;
			taArray
		local lnOccurs, ;
			lnStart, ;
			lnI, ;
			lnPos
		lnOccurs = occurs(',', tcList) + 1
		dimension taArray[lnOccurs]
		lnStart = 1
		for lnI = 1 to lnOccurs
			if lnI = lnOccurs
				lnPos = len(tcList) + 1
			else
				lnPos = at(',', tcList, lnI)
			endif lnI = lnOccurs
			taArray[lnI] = alltrim(substr(tcList, lnStart, lnPos - lnStart))
			lnStart = lnPos + 1
		next lnI
		return lnOccurs
		
	ENDPROC

	PROTECTED PROCEDURE getposition		&& Returns the new position: X for a horizontal splitter and Y for a vertical splitter
		* Abstract method.
		
		lparameters tnXCoord, ;
			tnYCoord
		
	ENDPROC

	PROCEDURE Init
		* Make the border invisible and flag that Init has fired.
		
		with This
			.BorderWidth  = 0
			.lInitialized = .T.
		endwith
		dodefault()
		
	ENDPROC

	PROCEDURE MouseMove
		lparameters tnButton, ;
			tnShift, ;
			tnXCoord, ;
			tnYCoord
		local lnPosition
		with This
			if tnButton = 1 and .Enabled
				lnPosition = .GetPosition(tnXCoord, tnYCoord)
				.MoveSplitterToPosition(lnPosition)
			endif tnButton = 1 ...
		endwith
		
	ENDPROC

	PROTECTED PROCEDURE moveobject1		&& Moves Object 1 to the new position
		* Abstract method.
		
		lparameters toObject
		
	ENDPROC

	PROTECTED PROCEDURE moveobject2		&& Moves Object 2 to the new position
		* Abstract method.
		
		lparameters toObject
		
	ENDPROC

	PROCEDURE movesplittertoposition		&& Moves the splitter to the specified position
		* Move the splitter to the specified position. Ensure it doesn't go too far,
		* based on the nObject1MinSize and nObject2MinSize settings.
		
		lparameters tnPosition
		local lnPosition, ;
			laObjects[1], ;
			lnObjects, ;
			lnI, ;
			loObject, ;
			lnAnchor
		with This
			lnPosition = tnPosition
			lnObjects  = .GetObjectNames(.cObject1Name, @laObjects)
			for lnI = 1 to lnObjects
				loObject   = evaluate('.Parent.' + laObjects[lnI])
				lnPosition = max(lnPosition, .GetObject1Size(loObject))
			next lnI
			lnObjects = .GetObjectNames(.cObject2Name, @laObjects)
			for lnI = 1 to lnObjects
				loObject   = evaluate('.Parent.' + laObjects[lnI])
				lnPosition = min(lnPosition, .GetObject2Size(loObject))
			next lnI
			lnAnchor = .Anchor
			.Anchor  = 0
			.SetPosition(lnPosition)
			.Anchor  = lnAnchor
		
		* Now move the left and right objects as well.
		
			lnObjects = .GetObjectNames(.cObject1Name, @laObjects)
			for lnI = 1 to lnObjects
				loObject = evaluate('.Parent.' + laObjects[lnI])
				with loObject
					lnAnchor = .Anchor
					.Anchor  = 0
					This.MoveObject1(loObject)
					.Anchor = lnAnchor
				endwith
			next lnI
			lnObjects = .GetObjectNames(.cObject2Name, @laObjects)
			for lnI = 1 to lnObjects
				loObject = evaluate('.Parent.' + laObjects[lnI])
				with loObject
					lnAnchor = .Anchor
					.Anchor  = 0
					This.MoveObject2(loObject)
					.Anchor = lnAnchor
				endwith
			next lnI
		
		* Call a hook method.
		
			.SplitterMoved()
		endwith
		
	ENDPROC

	PROTECTED PROCEDURE setposition		&& Sets the new position for the splitter
		* Abstract method.
		
		lparameters tnPosition
		
	ENDPROC

	PROCEDURE splittermoved		&& Called after the splitter is moved
		* Abstract method.
		
	ENDPROC

ENDDEFINE

DEFINE CLASS sfsplitterh AS sfsplitter OF "sfsplitter.vcx" 
 	*< CLASSDATA: Baseclass="control" Timestamp="" Scale="Pixels" Uniqueid="" />

	Anchor = 13
	MousePointer = 9
	Name = "sfsplitterh"
	_memberdata = <VFPData>
		<memberdata name="linitialized" type="property" display="lInitialized"/>
		</VFPData>
	
	PROCEDURE getobject1size		&& Gets the size for Object 1
		lparameters toObject
		return toObject.Left + This.nObject1MinSize
		
	ENDPROC

	PROCEDURE getobject2size		&& Gets the size for Object 2
		lparameters toObject
		return toObject.Left + toObject.Width - This.nObject2MinSize - This.Width
		
	ENDPROC

	PROCEDURE getposition		&& Returns the new position: X for a horizontal splitter and Y for a vertical splitter
		lparameters tnXCoord, ;
			tnYCoord
		return tnXCoord
		
	ENDPROC

	PROCEDURE moveobject1		&& Moves Object 1 to the new position
		lparameters toObject
		with toObject
			.Move(.Left, .Top, This.Left - .Left, .Height)
		endwith
		
	ENDPROC

	PROCEDURE moveobject2		&& Moves Object 2 to the new position
		lparameters toObject
		with toObject
			.Move(This.Left + This.Width, .Top, max(.Width + .Left - This.Left - ;
				This.Width, 0), .Height)
		endwith
		
	ENDPROC

	PROCEDURE setposition		&& Sets the new position for the splitter
		lparameters tnPosition
		This.Left = tnPosition
		
	ENDPROC

ENDDEFINE
